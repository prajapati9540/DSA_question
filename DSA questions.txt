
Ques1. Write a program to find a factorial of a number using recursion taking input from the user.

   Code:-  
import java.util.Scanner;

public class Main {
    public static int fac(int n) {
        if (n < 2)
            return 1;
       // } else {
            return n * fac(n - 1);
      //  }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int n = sc.nextInt();

        int factorial =  fac(n);
        System.out.println("The factorial of " + n + " is: " + factorial);

        sc.close();
    }
}

Ques2. Write a program to print Fibonacci Series.

Code:-
     
public class Main {
    public static void main(String[] args){
        int n=10;
        int first = 0, second = 1;

        System.out.println("Fibonacci Series:");
        for(int i =0; i<n ; i++){
            System.out.println(first + " ");
            int next = first + second ;
            first = second;
            second = next;
        }
    }
}

Ques3. Write a program to print forward count and reversed count using recursion.
Code:- 
    //import java.util.Scanner;
public class Main {
    public static void countForward(int n) {
        if (n == 0)  // base case
            return;

        countForward(n - 1);
        System.out.println(n + " ");
    }

    public static void countBackward(int n) {
        if (n == 0)
            return;
        System.out.print(n + " ");
        countBackward(n - 1);
    }
        public static void main (String[]args){
            //   Scanner sc = new Scanner(System.in);
            //  int n = sc.nextInt();
            int n = 15;


            countForward(n);
            countBackward(n);
        }
    }

Ques4. Write a program to print Fibonacci series using recursion takin input from the user.
Code:- 
    import java.util.Scanner;
public class Main {
    public static int fab(int n) {
        if (n == 0)
            return 0;
        if (n == 1)
            return 1;
        return fab(n - 1) + fab(n - 2);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the value of n: ");
        int n = sc.nextInt();


        int fibonacci = fab(n);
        System.out.println("The Fibonacci of  " + n + " numbers is: " + fibonacci);

        sc.close();
    }
}

Ques5. Write a program to sort the array element.(Bubble Sort Method)
Code:-
   public class Main {
    public static void main(String[] args) {
        int[] arr = {64, 34, 25, 12, 22, 11, 90};
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        System.out.println("Sorted Array");
        for(int num : arr){
            System.out.print(num+ " ");
     //   for(int i = 0; i< arr.length ; i++){
       //     System.out.print(arr[i]+ " ");
        }
    }
}

Ques6. Write a program to merge two arrays.
Code:-
   import java.util.Arrays;

public class Main{
    public static void main(String[] args){
        int[] arr1 = {1,2,3};
        int[] arr2 = {2,4,8,10,12,13};

        int n1 = arr1.length;
        int n2 = arr2.length;
        int[] merged = new int[n1+n2];

        for(int i = 0 ; i< n1 ; i++){
            merged[i] = arr1[i];
        }
        for(int i = 0; i<n2 ; i++){
            merged[n1 +i] = arr2[i];
        }
        System.out.println("Merged Arrays" + Arrays.toString(merged));
    }
}

Ques7. Write a program to find factorial using another method of recursion.
Code:-
  public class Main {
    public static  int go(int n , int a){
        if(n== 0)
            return a;
       return go(n-1,a*n);
    }
    public static void main(String[] args){

        System.out.println(go(5,1));
    }
}

Ques8. Write a program to find sum of n natural number using recursion.
Code:- 
  public class Main {
        public static  int go(int n , int a){
            if(n== 0)
                return a;
            return go(n-1,a+n);
        }
        public static void main(String[] args){
            System.out.println(go(19,0));
        }
    }

Ques9. Write a program to find sum of n natural number using recursion taking input from the user.
Code:-
   
import java.util.Scanner;

public class Main {
    public static int go(int n, int a) {
        if (n == 0)
            return a;
        return go(n - 1, a + n);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Taking input from user
        System.out.print("Enter n: ");
        int n = sc.nextInt();

        System.out.print("Enter starting value a: ");
        int a = sc.nextInt();

        // Calling the recursive function
        int result = go(n, a);

        System.out.println("Result: " + result);
    }
}

Ques10. Write a program to find target in the given array.
Code:-
   public class Main {
    public static void main(String[] args) {

        int[] arr = {4, 7, 3, 8, 2, 9, 11, 6};
        int[] targets = {9,89};

        for(int t : targets){
            int index = -1 ;
            for(int i= 0; i < arr.length ; i++){
                if(arr[i] == t){
                    index = i;
                    break;
                }
            }
            System.out.println(index != -1 ? "Target " + t + " found at index: " + index
                    : "Target " + t + " not found in the array.");
        }

    }
}

Ques11. Write a program of Binary Search function.
Code:-
   public class Main {

    // Binary Search function
    public static boolean bS(int[] arr, int target) {
        int l = 0;
        int r = arr.length - 1;
        int mid;

        while (l <= r) {
            mid = l + (r - l) / 2;

            if (arr[mid] == target) {
                return true; // Target found
            } else if (arr[mid] < target) {
                l = mid + 1; // Search in right half
            } else {
                r = mid - 1; // Search in left half
            }
        }

        return false; // Target not found
    }

    public static void main(String[] args) {
        int[] arr = {2, 3, 4, 6, 7, 8, 9, 11}; // Must be sorted for binary search
        int target1 = 30;


        System.out.println("Target 1 found? " + bS(arr, target1));

    }
}

Ques12. Write a program to find first and last occurance of a target.
Code:-
   public class Main {
    public static void element(int[] arr, int target) {

        int l = 0;
        int r = arr.length - 1;
        int mid;
        int f=0;
        int last =0;


        while (l <= r) {
            mid = (l + r) / 2;

            if (arr[mid] == target) {
                f=mid;
                r=mid-1;
            }
            if (arr[mid] < target) {
                l = mid + 1;
            }
            if (arr[mid] > target) {
                r = mid - 1;
            }
        }
        l=0;
         r = arr.length - 1;
          last =0;


        while (l <= r) {
            mid = (l + r) / 2;

            if (arr[mid] == target) {
                last=mid;
                l=mid+1;
            }
            if (arr[mid] < target) {
                l = mid + 1;
            }
            if (arr[mid] > target) {
                r = mid - 1;
            }
        }
        System.out.println(f+" "+last);

    }

        public static void main(String[] args){
        int[] arr={1,2,2,2,2,3,3,4,5,6,7};
        element(arr,2);
    }
}

Ques13. Write a program to find peak element.
Code:-
   public class Solution {
    public static int findPeakElement(int[] arr) {
        int left = 0;
        int right = arr.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;


            if (arr[mid] > arr[mid + 1]) {
                right = mid;
            } else {

                left = mid + 1;
            }
        }
        return left;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 1, 3, 5, 6, 4};
        int peakIndex = findPeakElement(arr);
        System.out.println("Peak element index: " + peakIndex);
        System.out.println("Peak element value: " + arr[peakIndex]);
    }
}



































 














































































